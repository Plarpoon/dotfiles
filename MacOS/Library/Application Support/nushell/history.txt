config reset -ne
config reset -n -e
config reset
config reset -wne
config reset -w
starship
curl -sS https://starship.rs/install.sh | sh
brew install --cask starship
/bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
starship
starship preset tokyo-night -o ~/.config/starship.toml
starship
starship init
starship init nu
starship preset tokyo-night -o ~/.config/starship.toml
brew install --cask starship
brew install starship
brew reinstall starship
$nu.config-path
starship preset nerd-font-symbols -o ~/.config/starship.toml
nvim .config/starship.toml
brew install --cask neovim
brew install neovim
nvim .config/starship.toml
starship preset gruvbox-rainbow -o ~/.config/starship.toml
nvim .config/alacritty/alacritty.toml
# We use Alacritty's default Linux config directory as our storage location here.<\n>mkdir -p ~/.config/alacritty/themes<\n>git clone https://github.com/alacritty/alacritty-theme ~/.config/alacritty/themes
# We use Alacritty's default Linux config directory as our storage location here.<\n>mkdir ~/.config/alacritty/themes<\n>git clone https://github.com/alacritty/alacritty-theme ~/.config/alacritty/themes
nvim .config/alacritty/alacritty.toml
starship preset tokyo-night -o ~/.config/starship.toml
clear
nvim .config/alacritty/alacritty.toml
config nu
$env.config.buffer_editor = nvim
$env.config.buffer_editor = ^nvim
$env.config.buffer_editor = nvim
nvim
config nu
$nu.config-path
brew install --cask kate
clear
config nu
fastfetch
brew install --cask fastfetch
brew install fastfetch
fastfetch
clear
fastfetch
clear
fastfetch
clear
fastfetch
nvim .config/alacritty/alacritty.toml
fastfetch
brew install marksman
brew outdated
brew update
brew outdated
echo $PATH
echo $env.PATH
zsh
which marksman
cd `Obsidian Vault/`
cd `DnD - The Last World/Volume III/`
ll
clear
ll
kate `Volume III-II - Westfalen.md`
nu -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
/bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
/bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/uninstall.sh)"<\n>
zsh -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/uninstall.sh)"<\n>
ll /
ll /bin/
cd
/bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/uninstall.sh)"<\n>
bash
clear
/bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/uninstall.sh)"
clear
/bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/uninstall.sh)"
NONINTERACTIVE=1 /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/uninstall.sh)"
/bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/uninstall.sh)"
curl
curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/uninstall.sh
curl -o https://raw.githubusercontent.com/Homebrew/install/HEAD/uninstall.sh
nvim uninstall.sh
sh uninstall.sh
bash uninstall.sh
nvim install.sh
sh install.sh
bash install.sh
brew help
brew doctor
ll /usr/bin
brew doctor
cat /etc/shells
brew install bat
cat /etc/shells
nvim .config/alacritty/alacritty.toml
clear
brew doctor
echo 'export PATH="/opt/homebrew/bin:$PATH"' >> ~/.zshrc
zsh
clear
brew doctor
cd `Library/Application Support/nushell/`
ll
nvim env.nu
vim env.nu
nvim
brew uninstall marksman
ll
rm install.sh uninstall.sh
clear
brew doctor
brew install bottom
htop
rustup --version
ll .cargo
source .cargo/env.nu
rustup --version
rustup update
sudo nvim `Library/Application Support/nushell/`
brew install --cask raycast
brew install --cask brave
brew install --cask brave-browser
brew install --cask macfuse
brew install --cask spotify
brew update
brew --cask update
brew upgrade --cask
brew upgrade --cask --greedy
brew upgrade --cask
brew reinstall cmake
brew reinstall --cask cmake
brew reinstall --cask obs
clear
brew install --cask obs
brew install --cask retroarch
brew install --cask qbittorrent
fastfetch
clear
cargo clean
rustup update
fastfetch
brew install --cask 7-zip
brew install --cask 7zip
fastfetch
brew install --cask cheatsheet
brew uninstall --cask cheatsheet
brew install --cask zoom slack mullvad
brew install --cask zoom slack mullvad-vpn
brew install --cask zoom slack mullvadvpn
brew install --cask godot
brew uninstall --cask cheatsheet
brew autoupdate status
clear
brew
brew help upgrade
clear
brew install --cask zig
brew install zig
fastfetch
brew install --cask krita
brew install --cask inkscape signal
brew install --cask minecraft
softwareupdate --install-rosetta --agree-to-license
brew update && brew upgrade --greedy
brew update; brew upgrade
brew install cmake-docs
brew update; brew upgrade --greedy
brew --cask updatr
brew --cask update
brew update --cask; brew upgrade --greedy
brew update; brew upgrade --cask
cd Workspace/
git clone https://github.com/obsproject/obs-studio.git
cd Workspace/
ll
rm -r obs-studio/
git clone --recursive https://github.com/obsproject/obs-studio.git
cmake --list-presets
cmake --preset macos
cmake --preset macos -DCMAKE_OSX_ARCHITECTURES=arm64
brew install ccache
brew install clang gcc
xcode-select --install
clang --version<\n>clang++ --version<\n>
sudo xcode-select -s /Library/Developer/CommandLineTools<\n>
clang --version<\n>clang++ --version<\n>
sudo xcode-select --reset
sudo xcodebuild -license accept
brew reinstall cmake
brew reinstall --cask cmake cmake-docs
brew reinstall --cask cmake
xcode-select --install
sudo xcode-select -s /Applications/Xcode.app/Contents/Developer
echo $PATH<\n>
echo $env.PATH
clang --version<\n>clang++ --version<\n>
xcode-select -p
export CC=$(xcrun --find clang)<\n>export CXX=$(xcrun --find clang++)<\n>
brew install clang++
clear
cd Workspace/
git clone --recursive https://github.com/aja-video/libajantv2.git
cd Workspace/
ll
cd libajantv2/
cmake -S . -B build -G Xcode
clear
cmake -S . -B build -G Xcode -DCMAKE_OSX_ARCHITECTURES=arm64;x86_64
$ cmake --build build
cmake --build build
ll
xcrun xcodebuild -project build/libajantv2.xcodeproj -target ALL_BUILD
git reset --hard
ll
cmake --preset macos
cd Workspace/
git clone --recursive https://github.com/CHollingworth/Lampray.git
brew install sdl2
brew upgrade
clear
cmake build
cmake run
clear
cmake build
make
cmake build
clear
./ build.sh
clear
sh build.sh
brew install ninja
clear
brew install ninja
clear
sh build.sh
clear
sh build.sh
clear
brew install lz4<\n>
file /Users/plarpoon/Workspace/Lampray/third-party/l4z/liblz4.so<\n>file /Users/plarpoon/Workspace/Lampray/third-party/bit7z/lib/x64/libbit7z64.a<\n>file /Users/plarpoon/Workspace/Lampray/third-party/nfd/lib/libnfd.a<\n>
clear
sh build.sh
clear
sh build.sh
brew install bit7z
brew install lz4
clear
sh build.sh
clear
sh build.sh
clear
sh build.sh
git reset --hard
cd Workspace/
git clone --recursive https://github.com/ChristianTermo/NeptuneSystemMobile.git
cd NeptuneSystemMobile/
flutter run
brew install flutter
flutter run
brew install cocoapods
brew uninstall cocoapods
brew install --cask cocoapods
brew install cocoapods
flutter run
flutter doctor
flutter build ios --release
open ios/Runner.xcworkspace
flutter clean
flutter build ios --release
open ios/Runner.xcworkspace
brew install --cask wireguard-go
brew install wireguard-go
wireguard
wireguard-go
brew uninstall wireguard-go
brew uninstall zoom
brew upgrade
brew uninstall opera-gx
brew upgrade
python --version
brew install python
python --version
brew reinstall python
python --version
rustup update
fastfetch
python --version
pip
clear
pip --version
brew install pipx
cd Workspace/
ll
mkdir red-hikari
cd red-hikari/
python -m pipx install -U hikari
pipx --version
pipx install -U hikari
pipx install hikari
hikari
cmake --version
clear
ninja run
cmake run
ninja --version
brew install ninja-build
ll
cd Workspace/Lampray/
clear
ll
zsh build.sh
brew install lz4<\n>
cd third-party/bit7z/lib/x64<\n>
ar -rcs libbit7z64.a *.o
ll
ranlib libbit7z64.a
ll third-party/bit7z/lib/x64<\n>
clear
ls third-party/bit7z/lib/x64
clear
pwd
ll
file libbit7z64.a<\n>file libbit7z64_d.a
clear
brew uninstall lz4<\n>
cd
cd Workspace/
git clone --recursive https://github.com/rikyoz/bit7z.git
mkdir build && cd build
mkdir build; cd build
cmake ../ -DCMAKE_BUILD_TYPE=Release
zsh cmake ../ -DCMAKE_BUILD_TYPE=Release
zsh
clear
cmake ../ -DCMAKE_BUILD_TYPE=Release
cmake .. -DCMAKE_BUILD_TYPE=Release
cmake -DCMAKE_BUILD_TYPE=Release
cmake ../CMakeLists.txt -DCMAKE_BUILD_TYPE=Release
rm -r build
ll
cd ..
rm -r build
ll
cd bit7z/
mkdir build; cd build
cmake ../ -DCMAKE_BUILD_TYPE=Release
cmake --build . -j --config Release
ll
ninja
ninja build
brew install warp
cmake --build . -j --config Release
cmake --build .
cmake --build
clear
zsh ./build.sh
brew uninstall warp
clear
zsh ./build.sh
uname -sm
uname -s -m
# in your build dir<\n>cmake .. -LH | grep CMAKE_HOST_SYSTEM_PROCESSOR
zsh
zsh ./build.sh
brew install qemu
brew install virt-manager
virt-manager
brew install libvirt
brew services enable --now libvirt
brew services enable libvirt
brew services start libvirt
virt-manager
virt-manager -c "qemu:///session" --no-fork
nvim QEMU/KVM.nu
touch QEMU/KVM.nu
ll
touch test
nvim test
mv test qemu/kvm.txt
mv test "qemu/kvm.txt"
mv "qemu/kvm.txt" test
mv test "qemu/kvm.txt"
ll
zsh ./setup.sh
zsh ./build.sh
clear
zsh ./build.sh
cd Workspace/
git clone https://github.com/named-data/ndn-cxx.git
git clone --recursive https://github.com/named-data/NFD.git
cd Workspace/
git clone --recursive https://github.com/lz4/lz4.git
build
cd Workspace/
git clone --recursive https://github.com/named-data/NFD.git
cd NFD/
ll
brew install nfd
cd Workspace/
git clone --recursive https://github.com/mlabbe/nativefiledialog.git
clear
zsh ./build.sh
clear
zsh ./build.sh
clear
zsh ./build.sh
clear
zsh ./build.sh 2>&1 | tee build.log
zsh ./build.sh out+err | tee build.log
zsh ./build.sh out+err | tee "build.log"
zsh ./build.sh out+err | tee build.log
clear
zsh ./build.sh o+e> build.log<\n>
clear
zsh ./build.sh o+e> build.log
clear
zsh ./build.sh o+e> build.log
clear
zsh ./build.sh o+e> build.log
clear
zsh ./build.sh o+e> build.log
clear
zsh ./build.sh o+e> build.log
git reset --hard
clear
zsh ./build.sh 2>&1 | tee build.log
clear
zsh ./build.sh o+e>| tee { save build.log }
rm build.log; zsh ./build.sh o+e>| tee { save build.log }
cd Workspace/Lampray/third-party
ll
clear
ll
tree l4z/
brew install tree
clear
ll
tree l4z/
tree lz4/
clear
tree lz4/
clear
rm build.log; zsh ./build.sh o+e>| tee { save build.log }
clear
rm build.log; zsh ./build.sh o+e>| tee { save build.log }
clear
rm build.log; zsh ./build.sh o+e>| tee { save build.log }
git config --global user.name "Alessandro Suha"
git config --global user.email github@plarp.net
clear
cd
clear
gpg --full-generate-key
brew install gpg
clear
gpg --full-generate-key
gpg --list-secret-keys --keyid-format=long
gpg --armor --export C3B15A5FCEC4701417233EF32DB3C4AE70F16642
git config --global user.signingkey C3B15A5FCEC4701417233EF32DB3C4AE70F16642
git config --global commit.gpgsign true
git config --global tag.gpgSign true
git status
git add .
git status
git commit -m "feat: Integrate upstream LZ4 CMake project and<\n>remove manual LZ4 sources"
gpg --list-secret-keys --keyid-format LONG
git config --global user.signingkey 2DB3C4AE70F16642
clear
git commit -m "feat: Integrate upstream LZ4 CMake project and remove manual LZ4 sources"
git push
clear
rm build.log; zsh ./build.sh o+e>| tee { save build.log }
clear
rm build.log; zsh ./build.sh o+e>| tee { save build.log }
clear
rm build.log; zsh ./build.sh o+e>| tee { save build.log }
clear
rm build.log; zsh ./build.sh o+e>| tee { save build.log }
cd Workspace/Lampray/third-party
ll
tree bit7z/
clear
tree bit7z/
clear
rm build.log; zsh ./build.sh o+e>| tee { save build.log }
clear
rm build.log; zsh ./build.sh o+e>| tee { save build.log }
clear
rm build.log; zsh ./build.sh o+e>| tee { save build.log }
clear
rm build.log; zsh ./build.sh o+e>| tee { save build.log }
clear
rm build.log; zsh ./build.sh o+e>| tee { save build.log }
clear
rm build.log; zsh ./build.sh o+e>| tee { save build.log }
clear
rm build.log; zsh ./build.sh o+e>| tee { save build.log }
clear
tree nfd
clear
rm build.log; zsh ./build.sh o+e>| tee { save build.log }
clear
rm build.log; zsh ./build.sh o+e>| tee { save build.log }
./build/Lampray
mkdir -p ~/.local/share/lampray/Language<\n>./build/Lampray
mkdir ~/.local/share/lampray/Language<\n>./build/Lampray
rm build.log; zsh ./build.sh o+e>| tee { save build.log }
git add .
git commit -m "feat: add missing libraries to build"
git push
qemu
virt-manager
brew install --cask virt-manager
brew upgrade
brew uninstall raycast
brew uninstall zen
brew uninstall zen-browser
clear
rm build.log; zsh ./build.sh o+e>| tee { save build.log }
ninja
cd build/
ninja
./Lampray
brew install p7zip
brew uninstall p7zip
cd Workspace/Lampray/build/
ll
clear
ll
brew install p7zip
cd /opt/homebrew/Cellar/p7zip/
ll
cd 17.06/
ll
ll lib/
ll lib/p7zip/7z
ll lib/p7zip
cd lib/
ll
cd p7zip/
ll
clear
ll
pwd
./Lampray
clear
rm build.log; zsh ./build.sh o+e>| tee { save build.log }
cd ..
rm build.log; zsh ./build.sh o+e>| tee { save build.log }
clear
rm build.log; zsh ./build.sh o+e>| tee { save build.log }
clear
clear
rm build.log; zsh ./build.sh o+e>| tee { save build.log }
./Lampray
clang --version<\n>clang++ --version<\n>
clear
clang --version<\n>clang++ --version
clear
clang --version
brew install rsync
ssh 192.168.1.30
clear
rsync -azP \<\n>  plarpoon@192.168.1.30:/run/media/system/vault/SMB/Backup/ \<\n>  "/Volumes/Big Boss/"
clear
rsync -azP plarpoon@192.168.1.30:/run/media/system/vault/SMB/Backup/ "/Volumes/Big Boss/"
rm build.log; zsh ./build.sh o+e>| tee { save build.log }
ll
./build/Lampray
clear
rm build.log; zsh ./build.sh o+e>| tee { save build.log }
./build/Lampray
git add .
git commit -m "feat: add pugixml"
git push
ll
cd third-party/
ll
git submodule add -b v1.15 https://github.com/zeux/pugixml.git pugixml
git submodule deinit -f third-party/pugixml
git rm -f third-party/pugixml
rm -rf .git/modules/third-party/pugixml
git submodule add -b v1.15 https://github.com/zeux/pugixml.git pugixml
git add .
git commit -m "refactor: remove pugixml"
git push
git submodule add -b v1.15 https://github.com/zeux/pugixml.git pugixml
git submodule deinit -f third-party/pugixml
rm -rf .git/modules/third-party/pugixml
git submodule add -b v1.15 https://github.com/zeux/pugixml.git pugixmlclear
rm -rf .git/modules/third-party/pugixml
rm -rf third-party/pugixml
rm -rf .git/modules/third-party/pugixml<\n>
rm -rf .git/modules/third-party/pugixml
git submodule add https://github.com/zeux/pugixml.git third-party/pugixml
rm -rf third-party/
git submodule add https://github.com/zeux/pugixml.git pugixml
rm -rf pugixml/ pugixmlclear/
git submodule add https://github.com/zeux/pugixml.git pugixml
rm -rf .git/modules/third-party/pugixml
rm -rf .git/modules/third-party/pugixmlclear
git submodule add https://github.com/zeux/pugixml.git pugixml
git add .
git submodule add https://github.com/zeux/pugixml.git pugixml
git submodule add https://github.com/zeux/pugixml.git pugixml --force
git submodule add https://github.com/zeux/pugixml.git pugixml
git submodule add --force https://github.com/zeux/pugixml.git pugixml
git submodule add --force https://github.com/mlabbe/nativefiledialog.git nfd
git add .
git commit -m "refactor: remove statically loaded libraries"
git push
git submodule add --force https://github.com/mlabbe/nativefiledialog.git nfd
git submodule add https://github.com/lz4/lz4.git lz4
git submodule add https://github.com/rikyoz/bit7z.git bit7z
git add .
git commit -m "refactor: remove statically linked json and imgui"
git submodule add https://github.com/ocornut/imgui.git imgui
git submodule add https://github.com/nlohmann/json.git json
cd ..
rm build.log; zsh ./build.sh o+e>| tee { save build.log }
git add .
git commit -m "refactor: add last submodules"
git push
rm build.log; zsh ./build.sh o+e>| tee { save build.log }
cd Workspace/Lampray/third-party/
ll
clear
ll
tree json
clear
ll
pwd
tree json
clear
rm build.log; zsh ./build.sh o+e>| tee { save build.log }
clear
rm build.log; zsh ./build.sh o+e>| tee { save build.log }
clear
rm build.log; zsh ./build.sh o+e>| tee { save build.log }
clear
rm build.log; zsh ./build.sh o+e>| tee { save build.log }
clear
rm build.log; zsh ./build.sh o+e>| tee { save build.log }
clear
git clean -xdf && mkdir build && cd build && cmake … && ninja
clear
zsh
git clean -xdf && mkdir build && cd build && cmake … && ninja
clear
rm build.log; zsh ./build.sh o+e>| tee { save build.log }
touch build.log
rm build.log; zsh ./build.sh o+e>| tee { save build.log }
cd Workspace/Lampray/third-party/
tree
rm -rf third-party/imgui
rm build.log; zsh ./build.sh o+e>| tee { save build.log }
clear
rm build.log; zsh ./build.sh o+e>| tee { save build.log }
cler
clear
rm build.log; zsh ./build.sh o+e>| tee { save build.log }
clear
rm build.log; zsh ./build.sh o+e>| tee { save build.log }
./build/Lampray
clear
rm build.log; zsh ./build.sh o+e>| tee { save build.log }
cmake -B build -S .
cmake --build build
git submodule add https://github.com/ocornut/imgui.git imgui
git submodule remove https://github.com/ocornut/imgui.git imgui
git submodule remove https://github.com/ocornut/imgui.git third-party/imgui
git submodule ad https://github.com/ocornut/imgui.git third-party/imgui
git submodule add https://github.com/ocornut/imgui.git third-party/imgui
git submodule add --force https://github.com/ocornut/imgui.git third-party/imgui
clear
rm build.log; zsh ./build.sh o+e>| tee { save build.log }
git clean -xdf && mkdir build && cd build && cmake … && ninja
zsh
touch build.log
rm build.log; zsh ./build.sh o+e>| tee { save build.log }
clear
tree imgui/
pwd
rm build.log; zsh ./build.sh o+e>| tee { save build.log }
./build/Lampray
git add .
git commit -m "refactor: build all libraries on Apple Silicon"
git oush
git push
rm build.log; zsh ./build.sh o+e>| tee { save build.log }
brew install gdb
brew uninstall gdb
lldb ./build/Lampray
cd Workspace/Lampray/
rm build.log; zsh ./build.sh o+e>| tee { save build.log }
clear
rm build.log; zsh ./build.sh o+e>| tee { save build.log }
lldb ./build/Lampray
clear
clear
rm build.log; zsh ./build.sh o+e>| tee { save build.log }
lldb ./build/Lampray
clear
lldb ./build/Lampray
clear
lldb ./build/Lampray
clear
rm build.log; zsh ./build.sh o+e>| tee { save build.log }
clear
clear
rm build.log; zsh ./build.sh o+e>| tee { save build.log }
lldb ./build/Lampray
clear
clear
lldb ./build/Lampray
clear
rm build.log; zsh ./build.sh o+e>| tee { save build.log }
lldb ./build/Lampray
clear
lldb ./build/Lampray
clear
clear
rm build.log; zsh ./build.sh o+e>| tee { save build.log }
lldb ./build/Lampray
clear
clear
rm build.log; zsh ./build.sh o+e>| tee { save build.log }
lldb ./build/Lampray
clear
git add .
git commit -m "refactor: attempt at fixing bit7z lack of thread safety crash"
git push
lldb ./build/Lampray
clear
rm build.log; zsh ./build.sh o+e>| tee { save build.log }
cd Workspace/Lampray/
clear
rm build.log; zsh ./build.sh o+e>| tee { save build.log }
lldb ./build/Lampray
clear
rm build.log; zsh ./build.sh o+e>| tee { save build.log }
git submodule update --recursive --remote
git submodule update --init --remote --recursive
which zsh
chmod +x QEMU:KVM.sh
which nu
brew install --cask kitty
brew upgrade
brew list
brew uninstall clang
clang
which clang
which llvm
brew uninstall llvm
xcode-select --install
softwareupdate
softwareupdate --list-full-installers
brew install aircrack-ng
brew upgrade
aircrack-ng
clear
ifconfig
clear
iwconfig
brew install iwconfig
clear
ifconfig
clear
sudo airmon-ng check
brew install airmon-ng
sudo airmon-ng check
gpg
which gnupg
which gpg
brew uninstall gpg
brew install gnupg
clang run
clang run main.cpp
clear
touch CMakeLists.txt
mkdir -p build
mkdir build
clear
cmake --build .
cd build/
cmake --build .
cd ..
clear
cmake --build .
cd build/
cmake ..
cmake --build .
./main
cd ..
./build/bin/main
cmake ..
cd build/
cmake ..
cd ..
cmake --build .
cd build/
cmake --build .
./bin/rock_paper_scissors
cd Workspace/
cargo new egui-test
cargo run
clear
cargo run
cd Workspace/
cargo new pokedex
rustup update
cargo run
clear
cargo run
clear
cargo run
clear
cargo run
clear
cargo run
nvim .config/alacritty/alacritty.toml
nvim .config/kitty/kitty.conf
which nu
nvim .config/kitty/kitty.conf
ll
cat .config/alacritty/alacritty.yml
cat .config/alacritty/alacritty.toml
:q
ll
nvim .config/kitty/kitty.conf
clear
nvim .config/kitty/kitty.conf
ll
cat .config/alacritty/alacritty.toml
fastfetch
nvim .config/kitty/kitty.conf
git clone --depth 1 https://github.com/dexpota/kitty-themes.git ~/.config/kitty/kitty-themes
cd ~/.config/kitty<\n>
ln -s ./kitty-themes/themes/OneDark.conf ~/.config/kitty/theme.conf
nvim .config/kitty/kitty.conf
cd
nvim .config/kitty/kitty.conf
ll
brew upgrade
ll
brew install --cask etcher
brew install --cask balenaetcher
brew upgrade
clear
